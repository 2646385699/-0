#include <opencv2/opencv.hpp>  
#include <iostream>  
  
// 函数：美颜处理（简化版，仅包含降噪和磨皮）  
cv::Mat beautyProcess(const cv::Mat& src) {  
    cv::Mat result = src.clone();  
  
    // 1. 降噪（这里使用双边滤波器作为示例）  
    cv::bilateralFilter(result, result, 15, 80, 80);  
  
    // 2. 磨皮（这里使用高斯模糊作为简化示例）  
    cv::GaussianBlur(result, result, cv::Size(0, 0), 5);  
  
    return result;  
}  
  
// 函数：调整亮度、对比度和饱和度  
cv::Mat adjustBrightnessContrastSaturation(const cv::Mat& src, double alpha=1.0, double beta=50, double gamma=1.0) {  
    cv::Mat result;  
    src.convertTo(result, -1, alpha, beta); // 调整亮度和对比度  
  
    // OpenCV没有直接调整饱和度的函数，但我们可以转换为HSV颜色空间，然后调整S通道  
    cv::Mat hsv;  
    cv::cvtColor(result, hsv, cv::COLOR_BGR2HSV);  
  
    for (int y = 0; y < hsv.rows; y++) {  
        for (int x = 0; x < hsv.cols; x++) {  
            cv::Vec3b& pixel = hsv.at<cv::Vec3b>(y, x);  
            // 限制饱和度在0-255之间  
            pixel[1] = std::min(std::max(int(pixel[1] * gamma), 0), 255);  
        }  
    }  
  
    cv::cvtColor(hsv, result, cv::COLOR_HSV2BGR);  
    return result;  
}  
  
int main(int argc, char** argv) {  
    // 读取图片  
    cv::Mat img = cv::imread("path_to_your_image.jpg");  
    if (img.empty()) {  
        std::cerr << "Error loading image!" << std::endl;  
        return -1;  
    }  
  
    // 美颜处理  
    cv::Mat beautyImg = beautyProcess(img);  
  
    // 调整亮度、对比度和饱和度  
    cv::Mat adjustedImg = adjustBrightnessContrastSaturation(beautyImg, 1.2, 30, 1.5);  
  
    // 显示原图和处理后的图片  
    cv::imshow("Original Image", img);  
    cv::imshow("Beautified Image", beautyImg);  
    cv::imshow("Adjusted Image", adjustedImg);  
  
    // 等待按键并关闭窗口  
    cv::wait(Key0);  
    cv::destroyAllWindows();  
  
    return 0;  
}
